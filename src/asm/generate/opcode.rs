use serde::{Deserialize, Serialize};

use crate::asm::generate::types::Type;
use crate::asm::node::handle::Handle;
use crate::asm::node::opcode::{ArrayType, Opcode, RefKind};
use crate::error::KapiResult;

// noinspection SpellCheckingInspection
#[derive(Debug, Clone, Eq, PartialEq, Serialize, Deserialize)]
#[allow(non_camel_case_types)]
pub enum Instruction {
    NOP,
    ACONST_NULL,
    ICONST_M1,
    ICONST_0,
    ICONST_1,
    ICONST_2,
    ICONST_3,
    ICONST_4,
    ICONST_5,
    LCONST_0,
    LCONST_1,
    FCONST_0,
    FCONST_1,
    FCONST_2,
    DCONST_0,
    DCONST_1,
    BIPUSH(i8),
    SIPUSH(i16),
    LDC(ConstantObject),
    LDC_W(ConstantObject),
    LDC2_W(ConstantObject),
    ILOAD(u8),
    LLOAD(u8),
    FLOAD(u8),
    DLOAD(u8),
    ALOAD(u8),
    ILOAD_0,
    ILOAD_1,
    ILOAD_2,
    ILOAD_3,
    LLOAD_0,
    LLOAD_1,
    LLOAD_2,
    LLOAD_3,
    FLOAD_0,
    FLOAD_1,
    FLOAD_2,
    FLOAD_3,
    DLOAD_0,
    DLOAD_1,
    DLOAD_2,
    DLOAD_3,
    ALOAD_0,
    ALOAD_1,
    ALOAD_2,
    ALOAD_3,
    IALOAD,
    LALOAD,
    FALOAD,
    DALOAD,
    AALOAD,
    BALOAD,
    CALOAD,
    SALOAD,
    ISTORE(u8),
    LSTORE(u8),
    FSTORE(u8),
    DSTORE(u8),
    ASTORE(u8),
    ISTORE_0,
    ISTORE_1,
    ISTORE_2,
    ISTORE_3,
    LSTORE_0,
    LSTORE_1,
    LSTORE_2,
    LSTORE_3,
    FSTORE_0,
    FSTORE_1,
    FSTORE_2,
    FSTORE_3,
    DSTORE_0,
    DSTORE_1,
    DSTORE_2,
    DSTORE_3,
    ASTORE_0,
    ASTORE_1,
    ASTORE_2,
    ASTORE_3,
    IASTORE,
    LASTORE,
    FASTORE,
    DASTORE,
    AASTORE,
    BASTORE,
    CASTORE,
    SASTORE,
    POP,
    POP2,
    DUP,
    DUP_X1,
    DUP_X2,
    DUP2,
    DUP2_X1,
    DUP2_X2,
    SWAP,
    IADD,
    LADD,
    FADD,
    DADD,
    ISUB,
    LSUB,
    FSUB,
    DSUB,
    IMUL,
    LMUL,
    FMUL,
    DMUL,
    IDIV,
    LDIV,
    FDIV,
    DDIV,
    IREM,
    LREM,
    FREM,
    DREM,
    INEG,
    LNEG,
    FNEG,
    DNEG,
    ISHL,
    LSHL,
    ISHR,
    LSHR,
    IUSHR,
    LUSHR,
    IAND,
    LAND,
    IOR,
    LOR,
    IXOR,
    LXOR,
    IINC {
        index: u8,
        value: i8,
    },
    I2L,
    I2F,
    I2D,
    L2I,
    L2F,
    L2D,
    F2I,
    F2L,
    F2D,
    D2I,
    D2L,
    D2F,
    I2B,
    I2C,
    I2S,
    LCMP,
    FCMPL,
    FCMPG,
    DCMPL,
    DCMPG,
    IFEQ(i16),
    IFNE(i16),
    IFLT(i16),
    IFGE(i16),
    IFGT(i16),
    IFLE(i16),
    IF_ICMPEQ(i16),
    IF_ICMPNE(i16),
    IF_ICMPLT(i16),
    IF_ICMPGE(i16),
    IF_ICMPGT(i16),
    IF_ICMPLE(i16),
    IF_ACMPEQ(i16),
    IF_ACMPNE(i16),
    GOTO(i16),
    JSR(i16),
    RET(u8),
    TABLESWITCH {
        default: i32,
        low: i32,
        high: i32,
        offsets: Vec<i32>,
    },
    LOOKUPSWITCH {
        default: i32,
        pairs: Vec<(i32, i32)>,
    },
    IRETURN,
    LRETURN,
    FRETURN,
    DRETURN,
    ARETURN,
    RETURN,
    GETSTATIC(u16),
    PUTSTATIC(u16),
    GETFIELD(u16),
    PUTFIELD(u16),
    INVOKEVIRTUAL(u16),
    INVOKESPECIAL(u16),
    INVOKESTATIC(u16),
    INVOKEINTERFACE {
        index: u16,
        count: u8,
    },
    INVOKEDYNAMIC(u16),
    NEW(u16),
    NEWARRAY(ArrayType),
    ANEWARRAY(u16),
    ARRAYLENGTH,
    ATHROW,
    CHECKCAST(u16),
    INSTANCEOF(u16),
    MONITORENTER,
    MONITOREXIT,
    MULTIANEWARRAY {
        index: u16,
        dimensions: u8,
    },
    IFNULL(i16),
    IFNONNULL(i16),
}

impl Instruction {
    pub const fn opcode(&self) -> Opcode {
        match self {
            Instruction::NOP => Opcode::NOP,
            Instruction::ACONST_NULL => Opcode::ACONST_NULL,
            Instruction::ICONST_M1 => Opcode::ICONST_M1,
            Instruction::ICONST_0 => Opcode::ICONST_0,
            Instruction::ICONST_1 => Opcode::ICONST_1,
            Instruction::ICONST_2 => Opcode::ICONST_2,
            Instruction::ICONST_3 => Opcode::ICONST_3,
            Instruction::ICONST_4 => Opcode::ICONST_4,
            Instruction::ICONST_5 => Opcode::ICONST_5,
            Instruction::LCONST_0 => Opcode::LCONST_0,
            Instruction::LCONST_1 => Opcode::LCONST_1,
            Instruction::FCONST_0 => Opcode::FCONST_0,
            Instruction::FCONST_1 => Opcode::FCONST_1,
            Instruction::FCONST_2 => Opcode::FCONST_2,
            Instruction::DCONST_0 => Opcode::DCONST_0,
            Instruction::DCONST_1 => Opcode::DCONST_1,
            Instruction::BIPUSH(_) => Opcode::BIPUSH,
            Instruction::SIPUSH(_) => Opcode::SIPUSH,
            Instruction::LDC(_) => Opcode::LDC,
            Instruction::LDC_W(_) => Opcode::LDC_W,
            Instruction::LDC2_W(_) => Opcode::LDC2_W,
            Instruction::ILOAD(_) => Opcode::ILOAD,
            Instruction::LLOAD(_) => Opcode::LLOAD,
            Instruction::FLOAD(_) => Opcode::FLOAD,
            Instruction::DLOAD(_) => Opcode::DLOAD,
            Instruction::ALOAD(_) => Opcode::ALOAD,
            Instruction::ILOAD_0 => Opcode::ILOAD_0,
            Instruction::ILOAD_1 => Opcode::ILOAD_1,
            Instruction::ILOAD_2 => Opcode::ILOAD_2,
            Instruction::ILOAD_3 => Opcode::ILOAD_3,
            Instruction::LLOAD_0 => Opcode::LLOAD_0,
            Instruction::LLOAD_1 => Opcode::LLOAD_1,
            Instruction::LLOAD_2 => Opcode::LLOAD_2,
            Instruction::LLOAD_3 => Opcode::LLOAD_3,
            Instruction::FLOAD_0 => Opcode::FLOAD_0,
            Instruction::FLOAD_1 => Opcode::FLOAD_1,
            Instruction::FLOAD_2 => Opcode::FLOAD_2,
            Instruction::FLOAD_3 => Opcode::FLOAD_3,
            Instruction::DLOAD_0 => Opcode::DLOAD_0,
            Instruction::DLOAD_1 => Opcode::DLOAD_1,
            Instruction::DLOAD_2 => Opcode::DLOAD_2,
            Instruction::DLOAD_3 => Opcode::DLOAD_3,
            Instruction::ALOAD_0 => Opcode::ALOAD_0,
            Instruction::ALOAD_1 => Opcode::ALOAD_1,
            Instruction::ALOAD_2 => Opcode::ALOAD_2,
            Instruction::ALOAD_3 => Opcode::ALOAD_3,
            Instruction::IALOAD => Opcode::IALOAD,
            Instruction::LALOAD => Opcode::LALOAD,
            Instruction::FALOAD => Opcode::FALOAD,
            Instruction::DALOAD => Opcode::DALOAD,
            Instruction::AALOAD => Opcode::AALOAD,
            Instruction::BALOAD => Opcode::BALOAD,
            Instruction::CALOAD => Opcode::CALOAD,
            Instruction::SALOAD => Opcode::SALOAD,
            Instruction::ISTORE(_) => Opcode::ISTORE,
            Instruction::LSTORE(_) => Opcode::LSTORE,
            Instruction::FSTORE(_) => Opcode::FSTORE,
            Instruction::DSTORE(_) => Opcode::DSTORE,
            Instruction::ASTORE(_) => Opcode::ASTORE,
            Instruction::ISTORE_0 => Opcode::ISTORE_0,
            Instruction::ISTORE_1 => Opcode::ISTORE_1,
            Instruction::ISTORE_2 => Opcode::ISTORE_2,
            Instruction::ISTORE_3 => Opcode::ISTORE_3,
            Instruction::LSTORE_0 => Opcode::LSTORE_0,
            Instruction::LSTORE_1 => Opcode::LSTORE_1,
            Instruction::LSTORE_2 => Opcode::LSTORE_2,
            Instruction::LSTORE_3 => Opcode::LSTORE_3,
            Instruction::FSTORE_0 => Opcode::FSTORE_0,
            Instruction::FSTORE_1 => Opcode::FSTORE_1,
            Instruction::FSTORE_2 => Opcode::FSTORE_2,
            Instruction::FSTORE_3 => Opcode::FSTORE_3,
            Instruction::DSTORE_0 => Opcode::DSTORE_0,
            Instruction::DSTORE_1 => Opcode::DSTORE_1,
            Instruction::DSTORE_2 => Opcode::DSTORE_2,
            Instruction::DSTORE_3 => Opcode::DSTORE_3,
            Instruction::ASTORE_0 => Opcode::ASTORE_0,
            Instruction::ASTORE_1 => Opcode::ASTORE_1,
            Instruction::ASTORE_2 => Opcode::ASTORE_2,
            Instruction::ASTORE_3 => Opcode::ASTORE_3,
            Instruction::IASTORE => Opcode::IASTORE,
            Instruction::LASTORE => Opcode::LASTORE,
            Instruction::FASTORE => Opcode::FASTORE,
            Instruction::DASTORE => Opcode::DASTORE,
            Instruction::AASTORE => Opcode::AASTORE,
            Instruction::BASTORE => Opcode::BASTORE,
            Instruction::CASTORE => Opcode::CASTORE,
            Instruction::SASTORE => Opcode::SASTORE,
            Instruction::POP => Opcode::POP,
            Instruction::POP2 => Opcode::POP2,
            Instruction::DUP => Opcode::DUP,
            Instruction::DUP_X1 => Opcode::DUP_X1,
            Instruction::DUP_X2 => Opcode::DUP_X2,
            Instruction::DUP2 => Opcode::DUP2,
            Instruction::DUP2_X1 => Opcode::DUP2_X1,
            Instruction::DUP2_X2 => Opcode::DUP2_X2,
            Instruction::SWAP => Opcode::SWAP,
            Instruction::IADD => Opcode::IADD,
            Instruction::LADD => Opcode::LADD,
            Instruction::FADD => Opcode::FADD,
            Instruction::DADD => Opcode::DADD,
            Instruction::ISUB => Opcode::ISUB,
            Instruction::LSUB => Opcode::LSUB,
            Instruction::FSUB => Opcode::FSUB,
            Instruction::DSUB => Opcode::DSUB,
            Instruction::IMUL => Opcode::IMUL,
            Instruction::LMUL => Opcode::LMUL,
            Instruction::FMUL => Opcode::FMUL,
            Instruction::DMUL => Opcode::DMUL,
            Instruction::IDIV => Opcode::IDIV,
            Instruction::LDIV => Opcode::LDIV,
            Instruction::FDIV => Opcode::FDIV,
            Instruction::DDIV => Opcode::DDIV,
            Instruction::IREM => Opcode::IREM,
            Instruction::LREM => Opcode::LREM,
            Instruction::FREM => Opcode::FREM,
            Instruction::DREM => Opcode::DREM,
            Instruction::INEG => Opcode::INEG,
            Instruction::LNEG => Opcode::LNEG,
            Instruction::FNEG => Opcode::FNEG,
            Instruction::DNEG => Opcode::DNEG,
            Instruction::ISHL => Opcode::ISHL,
            Instruction::LSHL => Opcode::LSHL,
            Instruction::ISHR => Opcode::ISHR,
            Instruction::LSHR => Opcode::LSHR,
            Instruction::IUSHR => Opcode::IUSHR,
            Instruction::LUSHR => Opcode::LUSHR,
            Instruction::IAND => Opcode::IAND,
            Instruction::LAND => Opcode::LAND,
            Instruction::IOR => Opcode::IOR,
            Instruction::LOR => Opcode::LOR,
            Instruction::IXOR => Opcode::IXOR,
            Instruction::LXOR => Opcode::LXOR,
            Instruction::IINC { .. } => Opcode::IINC,
            Instruction::I2L => Opcode::I2L,
            Instruction::I2F => Opcode::I2F,
            Instruction::I2D => Opcode::I2D,
            Instruction::L2I => Opcode::L2I,
            Instruction::L2F => Opcode::L2F,
            Instruction::L2D => Opcode::L2D,
            Instruction::F2I => Opcode::F2I,
            Instruction::F2L => Opcode::F2L,
            Instruction::F2D => Opcode::F2D,
            Instruction::D2I => Opcode::D2I,
            Instruction::D2L => Opcode::D2L,
            Instruction::D2F => Opcode::D2F,
            Instruction::I2B => Opcode::I2B,
            Instruction::I2C => Opcode::I2C,
            Instruction::I2S => Opcode::I2S,
            Instruction::LCMP => Opcode::LCMP,
            Instruction::FCMPL => Opcode::FCMPL,
            Instruction::FCMPG => Opcode::FCMPG,
            Instruction::DCMPL => Opcode::DCMPL,
            Instruction::DCMPG => Opcode::DCMPG,
            Instruction::IFEQ(_) => Opcode::IFEQ,
            Instruction::IFNE(_) => Opcode::IFNE,
            Instruction::IFLT(_) => Opcode::IFLT,
            Instruction::IFGE(_) => Opcode::IFGE,
            Instruction::IFGT(_) => Opcode::IFGT,
            Instruction::IFLE(_) => Opcode::IFLE,
            Instruction::IF_ICMPEQ(_) => Opcode::IF_ICMPEQ,
            Instruction::IF_ICMPNE(_) => Opcode::IF_ICMPNE,
            Instruction::IF_ICMPLT(_) => Opcode::IF_ICMPLT,
            Instruction::IF_ICMPGE(_) => Opcode::IF_ICMPGE,
            Instruction::IF_ICMPGT(_) => Opcode::IF_ICMPGT,
            Instruction::IF_ICMPLE(_) => Opcode::IF_ICMPLE,
            Instruction::IF_ACMPEQ(_) => Opcode::IF_ACMPEQ,
            Instruction::IF_ACMPNE(_) => Opcode::IF_ACMPNE,
            Instruction::GOTO(_) => Opcode::GOTO,
            Instruction::JSR(_) => Opcode::JSR,
            Instruction::RET(_) => Opcode::RET,
            Instruction::TABLESWITCH { .. } => Opcode::TABLESWITCH,
            Instruction::LOOKUPSWITCH { .. } => Opcode::LOOKUPSWITCH,
            Instruction::IRETURN => Opcode::IRETURN,
            Instruction::LRETURN => Opcode::LRETURN,
            Instruction::FRETURN => Opcode::FRETURN,
            Instruction::DRETURN => Opcode::DRETURN,
            Instruction::ARETURN => Opcode::ARETURN,
            Instruction::RETURN => Opcode::RETURN,
            Instruction::GETSTATIC(..) => Opcode::GETSTATIC,
            Instruction::PUTSTATIC(..) => Opcode::PUTSTATIC,
            Instruction::GETFIELD(..) => Opcode::GETFIELD,
            Instruction::PUTFIELD(..) => Opcode::PUTFIELD,
            Instruction::INVOKEVIRTUAL(..) => Opcode::INVOKEVIRTUAL,
            Instruction::INVOKESPECIAL(..) => Opcode::INVOKESPECIAL,
            Instruction::INVOKESTATIC(..) => Opcode::INVOKESTATIC,
            Instruction::INVOKEINTERFACE { .. } => Opcode::INVOKEINTERFACE,
            Instruction::INVOKEDYNAMIC(..) => Opcode::INVOKEDYNAMIC,
            Instruction::NEW(..) => Opcode::NEW,
            Instruction::NEWARRAY(..) => Opcode::NEWARRAY,
            Instruction::ANEWARRAY(..) => Opcode::ANEWARRAY,
            Instruction::ARRAYLENGTH => Opcode::ARRAYLENGTH,
            Instruction::ATHROW => Opcode::ATHROW,
            Instruction::CHECKCAST(..) => Opcode::CHECKCAST,
            Instruction::INSTANCEOF(..) => Opcode::INSTANCEOF,
            Instruction::MONITORENTER => Opcode::MONITORENTER,
            Instruction::MONITOREXIT => Opcode::MONITOREXIT,
            Instruction::MULTIANEWARRAY { .. } => Opcode::MULTIANEWARRAY,
            Instruction::IFNULL(..) => Opcode::IFNULL,
            Instruction::IFNONNULL(..) => Opcode::IFNONNULL,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub enum ConstantObject {
    String(String),
    Int(i32),
    Float(f32),
    Long(i64),
    Double(f64),
    Class(String),
    /// # Arguments
    /// - [RefKind]: reference kind
    /// - [String]: class name
    /// - [String]: method name
    /// - [String]: method descriptor
    MethodHandle(RefKind, String, String, String),
    MethodType(String),
    /// # Arguments
    /// - [String]: method name
    /// - [String]: method descriptor
    /// - [Handle]: bootstrap method handle
    /// - [Vec<ConstantObject>]: bootstrap method arguments
    ConstantDynamic(String, String, Handle, Vec<ConstantObject>),
}

impl ConstantObject {
    /// Returns true if [ConstantObject] is [ConstantObject::Long], [ConstantObject::Double].
    pub(crate) const fn is_2(&self) -> bool {
        match self {
            ConstantObject::Long(..) | ConstantObject::Double(..) => true,
            _ => false,
        }
    }

    pub(crate) fn constant_type(&self) -> KapiResult<Type> {
        match self {
            ConstantObject::String(_) => Ok(Type::string_type()),
            ConstantObject::Int(_) => Ok(Type::Int),
            ConstantObject::Float(_) => Ok(Type::Float),
            ConstantObject::Long(_) => Ok(Type::Long),
            ConstantObject::Double(_) => Ok(Type::Double),
            ConstantObject::Class(_) => Ok(Type::ObjectRef("java/lang/Class".to_string())),
            ConstantObject::MethodHandle(_, _, _, _) => {
                Ok(Type::ObjectRef("java/lang/invoke/MethodHandle".to_string()))
            }
            ConstantObject::MethodType(_) => {
                Ok(Type::ObjectRef("java/lang/invoke/MethodType".to_string()))
            }
            ConstantObject::ConstantDynamic(_, method_descriptor, _, _) => {
                Type::from_method_descriptor(method_descriptor).map(|(.., return_type)| return_type)
            }
        }
    }
}

impl Eq for ConstantObject {}

impl From<String> for ConstantObject {
    fn from(value: String) -> Self {
        Self::String(value)
    }
}

impl From<&str> for ConstantObject {
    fn from(value: &str) -> Self {
        Self::String(value.to_owned())
    }
}

impl From<i32> for ConstantObject {
    fn from(value: i32) -> Self {
        Self::Int(value)
    }
}

impl From<f32> for ConstantObject {
    fn from(value: f32) -> Self {
        Self::Float(value)
    }
}

impl From<i64> for ConstantObject {
    fn from(value: i64) -> Self {
        Self::Long(value)
    }
}

impl From<f64> for ConstantObject {
    fn from(value: f64) -> Self {
        Self::Double(value)
    }
}
